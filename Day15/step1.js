/*
    - 자료형
        0. undefined            :(자료없다.)
        1. 숫자형 2. 문자열 3. 불 
        4. 배열[]               : 여러개의 자료를 하나의 자료로 집함   
            - 성질 , 상태 , 필드 
        5. 함수(){}             : 코드 집합    
            - 기능 , 행위 , 이벤트 , 메소드 
    함수
        - 언제 어떤 함수를 사용여부는 답이 정해져 있지 않다. ※ 코드 묶음 , 다시 사용하기 위해 사용
        - 코드의 집합을 나타내는 자료형
        - 용어
            - 함수호출  : 함수사용할떄. f(x)
            - 매개변수  : 함수호출할떄 괄호 내부에 여러가지 자료를 넣을때  = 인수  
            - 리턴값    : 함수호출해서 최종적으로 나오는 결과 = 반환 return

        - 종류
            1. 매개변수O 리턴O
                function 함수(x , y){ z = x+y; return z; }
            2. 매개변수O 리턴X
                function 함수(x , y){ z = x+y; }
            3. 매개변수X 리턴O
                function 함수(){ z =3+3; }
            4. 매개변수X 리턴xX
                function 함수(){}

        - 함수를 사용하면 좋은점.
            1. 반복되는 코드를 한번에 정의 하고 필요에 따라 호출해서 반복 작업을 피할수 있다. [ 코드 양을 줄일수 있다. ]
            2. 긴프로그램을 기능별로 나눠 여러 함수로 나눠 작성하면 모듈화[ 조각단위 ]로 전체 코드의 가독성이 좋다.
            3. 기능별(함수별)로 수정이 가능하므로 유지보수가 쉽다.

        - 1. 익명함수 : 이름이 없는 함수.
            - function(){}       : 함수에 이름이 없어서 호출이 불가능.
            - 익명함수는 변수나 상수에 대입하여 사용한다.
                - const/let 변수명 = function(){}
        - 2. 선언적함수 : 이름이 있는 함수.
            - function 함수명(){}       : 함수에 이름이 있는 상태.


*/
// p.197 : 익명함수.
    // - function(){}       : 함수에 이름이 없어서 호출이 불가능.

    const 함수 = function(){        // 익명함수는 변수나 상수에 대입하여 사용한다.
        console.log('함수 내부의 코드입니다. ···1');
        console.log('함수 내부의 코드입니다. ···2');
        console.log('함수 내부의 코드입니다. ···3');
        console.log('');
    }

함수()
함수()
// 함수2()  오류 is not definedat [ 함수가없다. ]

console.log(typeof 함수); // 자료형 확인 : function
console.log(함수);

// p.199 : 선언적 함수.
function 선언함수(){        // function 함수명(){}
    console.log('함수 내부의 코드입니다. ···1');
    console.log('함수 내부의 코드입니다. ···2');
    console.log('함수 내부의 코드입니다. ···3');
    console.log('');
}   // f end

선언함수()
선언함수()

console.log(typeof 선언함수); // 자료형 확인 : function
console.log(선언함수);

// p.201
    // 1. 함수명 'f' , 매개변수 : 'x' , 리턴값 ; ' x + x '
function f(x){ return x + x }
    // 함수console.log()호출(함수f(3)호출)
    // 1. f(3) => 6
    // 2. console.log ( 6 )
console.log( f(3) );