JAVA 와 JAVASCRIPT 는 다르다.
자바스크립트로 할수 있는 것들

	1. 웹 클라이언트 ( 서비스를 제공받는 사용자 )	[ HTML , CSS , JS ]
	---------------------- 2009년 이후 Node.js 가 나온 이후 ---------------------------------
	2. 웹 서버 ( 서비스를 제공하는 )	[ Node.js ]
	3. 모바일	[ react native ]
	4. 데스크톱 애플리케이션 [ NW.js ]
	5. 데이터베이스 관리 [ NOSQL ]

- 텍스트 에디터
	프론트엔드 	: VScode , 아톰 등등 ( 회사 자유 )
	백엔드		: Eclipse(이클립스) , IntelliJ(인텔리제이) 등등

- 브라우저 [ 클라이언트 입장 ]
	크롬 , EDGE , 사파리 등등

- 기본용어
	부호				: (모스부호[ 짦은신호 또는 긴신호 ] -> 전기상태[ 있다 또는 없다 ] -> 이진수[ 0 또는 1]  ) 

	코드				: 정보를 다른 형태로 변환하는 규칙[ 문법/도구 ]
							[ java[ 규칙 ] , html[ 규칙 <> ] , css[ 규칙 식별자{} ] ,js , python ]

	표현식				: 하나 이상의 값/정보 으로 표현될 수 있는 코드를 의미
	문장			    : 표현식 한개이상 모인것(명령문)
	프로그램			: 문장이 모인것(명령문의 집합)
	프로세스			: 현재 실행중인 프로그램( 스케줄링/스레드 )
	응용프로그램		: 사용자가 사용할수 있도록 만든 프로그램 ( = 애플리케이션)
	웹 애플리케이션		: 웹에서 사용하는 프로그램



	부호 > 코드 > 표현식 > 문장 > 프로그램	  사용처에 따라		> 웹 애플리케이션(프로세스)
												  			> 앱 애플리케이션(프로세스)
														  	> 데스크탑 애플리케이션(프로세스)

	개발자/사람								컴퓨터
	<div>					--------- 명령어 -----------	[번역] 010101010101

	박스모델 				<------- 실행결과 --------->

	console.log('안녕') 	--------- 명령어  ----------->	[번역] 010101010101
	안녕					<-------- 실행결과------------

- 키워드 : 언어들이 미리 만든 단어들.
	!! : 키워드와 동일하게 이름을 정의하지 말자!! [ 중복되니까 ]

- 식별자 : 어떠한 변수/함수/명령 등을 식별하기 위한 이름
	HTML/CSS : id , class , <마크업>
	JS : 변수/함수/클래스 등등
	1. 키워드 사용 불가 2. 숫자 시작 불가 3. 특수기호 _ , $ 만 가능 4. 공백 불가능
	2. 영어권장(카멜표기법) , 의미있는 이름

- 주석 : 코드 설명
	HTML : <!-- 주석 -->  
	CSS  : /* 주석 */
	JS   : 1. 한줄주석 : // 한줄주석   2. 여러줄주석  /* 여러줄 주석 */


1. 입출력 방법 [ *2/6 ]
	1. alert("출력하고싶은 문구");							: 경고창(확인버튼) 출력 함수
	2. console.log("출력하고싶은 문구");					: console(F12개발자도구) 출력 함수
	3. confirm("출력하고싶은 문구");						: 확인창 (확인 = true/취소 = false) 에 출력하기
	4. prompt("출력하고싶은 문구");							: 입력창( 입력상자[input] , 확인 = 입력값 반환 / 취소 = false )
	5. document.write("HTML에 출력하고싶은 문구");			: HTML에 출력 함수					  	
	6. document.특정식별자.html = "HTML 에출력하고싶은말"	 : 특정 요소/마크업 에 출력 함수

2. 기본 자료형
	- 자료 : 프로그램이 처리할수 있는 모든 것
	- 자료형 : 자료 형태/모양/폼 에 따라 나눠 놓은 것
		1. 숫자 (number)
		2. 문자열 (string)
		3. 불 (boolean)
			[ 숫자 ]
			1. 숫자와 문자열 구분
				273 vs " 273 " 다르다.
			2. 


			[ 문자열 ]
			1. 문자열 표현방법 : '문자열' 또는 "문자열"
				주의할점 :1. '문자열" 불가능
						 2. " ' ' " 가능
						 3. ' " " ' 가능
			
			2. 이스케이프/제어 문자를
				1. \n : 줄바꿈
				2. \t : 들여쓰기
				3. \\ : 백슬래쉬 출력
				그외 \" , \'  연산자 출력시 

			3. 문자열 연산자
				+ : 문자열 연결 연산자 [ "문자열" + "문자열" ]
				[인덱스] : 문자열에서 인덱스 번째 문자 추출
					-인덱스 : 저장된 순서번호 = 인덱스 0번* 시작
						'안녕하세요'[0]  : 해당 문자열내 0번째 문자
						'안 녕 하 세 요'
						[0][1][2][3][4]

				length : 문자열내 문자 개수
					'안녕하세요'.length		: 해당 문자열내 문자 개수 => 5 

3. 연산자 [ 연산/계산/논리 시 사용되는 특수문자 ]
	1. 산술 연산자 : 결과값 출력
		+ 더하기 - 빼기 * 곱하기 / 나누기 % 나머지
	2. 연결 연산자 :
		+ 연결연산자  
			숫자+숫자 [더하기]
			숫자+'문자열' [ 연결 ]
			'문자열' + '문자열' [ 연결 ]

	3. 비교연산자 : 비교 후 true/참 혹은 false/거짓 반환
		>  초과/크다				 <  미만/작다
		>= 이상/크거나같다			 <= 이하/작거나같다
		== 같다[데이터비교] 		 === 같다[데이터/자료형 강력비교]
		!= 같지않다					!== 같지않다

	4. 관계연산자 : 주로 비교연산자를 2개이상일때 사용 후 true/참 혹은 false/거짓 반환
		&& 이면서 면서 이고 모두 그리고 and 조건    ex: 초등학생이 사탕이면서 초콜릿 먹는다 [ 모두 참 이면 참 ]
		|| 이거나 거나 또는 하나라도 or 조건		ex: 초등학생이 사탕이거나 초콜릿을 먹는다. [ 하나라도 참이면 참 ]
		!  반대 부정 not 조건					   ex: 초등학생이 사탕 빼고 먹는다. [ 참 -> 거짓 / 거짓 -> 참 ]
														!초등학생 == 사탕

	5. 증감연산자 : 1증가 혹은 1감소
		++ 1증가 [ ++변수 : 선위증가 , 변수++ : 후위증가 ]
		-- 1감소 [ --변수 : 선위감소 , 변수-- : 후위감소 ]

	6. 대입연산자 : 오른쪽 데이터를 왼쪽에 넣어주기/대입/저장
		= 대입 [ 변수 = 10;		변수에 10 이라는 데이터를 변수에 대입/저장 ]
		+= 오른쪽 데이터를 왼쪽값과 더한후에 왼쪽에 대입
		-= , *= , /= , %= 등등
















1. 모스부호
	-정의 : 모스 부호는 한 종류의 신호발생장치로 짧은 신호와 긴 신호를 적절히 조합하여 문자 기호를 표기하는 방식이다.
	-사용되는곳 : 전신(전보)를 주고 받는데 사용되었고, 재난 신호 등으로 쓰이며, 아마추어 무선에서 연속파(CW) 통신 수단으로 사용
				 해군/해경 함정에는 아직도 빛을 이용하여 모스 부호를 보내는 발광신호기가 필수적으로 장착

2. 이진코드(2진수)
	-정의 : 컴퓨터가 인식할 수 있는 0과 1로 구성된 이진 코드 이다. = 바이너리 코드(binary code)
	-형태/모양 코드 EX	: 숫자 1 -> 110001 a -> 1100001 A -> 1000001 
	-사용되는곳 : 컴퓨터 CPU(명령어) 에서 사용

3. 아스키코드
	-정의 : American Standard Code for Information Interchange, 미국 정보 교환 표준 부호
			영문 알파벳을 사용하는 문자 인코딩
			7비트 부호체계 (128) [0~127]
			8비트 부호체계 + 유럽어, 추가 특수문자 (256) [0~255]
	-형태/모양 코드 : 문자=10진수=16진수 
					"0" = 48 = 0X30

					문자=10진수=16진수
					NULL(공백)=0=0x00
	-사용되는곳 : 컴퓨터나 통신장비에서 사용 *문자를 사용하는 장치*
				 문자 인코딩은 아스키에 기초를 두고 있음


4. 유니코드
	-정의 : 전 세계의 모든 문자를 다루도록 설계된 표준 문자 전산 처리 방식(집합) 
	-사용되는곳 : 대부분의 OS 애플리케이션, 웹사이트, DB, TXT 파일 등 글자를 저장 표현하기 위해 사용
		ex) 사용자의 애플리케이션이 국제적 애플리케이션으로 여러 다른 언어를 지원해야 하는경우